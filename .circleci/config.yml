version: 2.1

orbs:
  slack: circleci/slack@4.12.5

executors:
  node-docker:
    docker:
      - image: cimg/node:20.0
    resource_class: medium

commands:
  deploy:
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Set branch variables
          command: |
            SAFE_BRANCH_NAME=$(echo ${CIRCLE_BRANCH} | tr '/' '-' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
            echo "export SAFE_BRANCH_NAME=${SAFE_BRANCH_NAME}" >> $BASH_ENV
            source $BASH_ENV
            echo "üåø Branch: ${CIRCLE_BRANCH}"
            echo "üè∑Ô∏è  Safe branch name: ${SAFE_BRANCH_NAME}"
      - run:
          name: Validate Hetzner server status
          command: |
            echo "üîç Validating Hetzner server status using API..."
            # Get server info using Hetzner API
            RESPONSE=$(curl -s -H "Authorization: Bearer ${HETZNER_API_TOKEN}" \
              "https://api.hetzner.cloud/v1/servers" | head -c 100)
            
            if [[ $? -eq 0 && "$RESPONSE" == *"servers"* ]]; then
              echo "‚úÖ Hetzner API connection successful"
              echo "‚úÖ Server infrastructure validated"
            else
              echo "‚ùå Failed to connect to Hetzner API"
              echo "Response: $RESPONSE"
              exit 1
            fi
      - run:
          name: Build Docker image
          command: |
            echo "üî® Building Docker image for << parameters.environment >>..."
            echo "üì¶ Build context: $(pwd)"
            echo "üê≥ Docker info:"
            docker --version
            
            if [ "<< parameters.environment >>" = "prod" ]; then
              echo "üéØ Building production target..."
              docker build --target production -t express-app:${CIRCLE_SHA1} .
            else
              echo "üß™ Building staging target..."
              docker build --target staging -t express-app:${CIRCLE_SHA1} .
            fi
            
            echo "üè∑Ô∏è  Tagging image..."
            docker tag express-app:${CIRCLE_SHA1} rekkoo-server-<< parameters.environment >>-${SAFE_BRANCH_NAME}:latest
            echo "‚úÖ Docker image built successfully"
      - run:
          name: Save Docker image
          command: |
            echo "üíæ Saving Docker image to compressed archive..."
            mkdir -p /tmp/docker-images
            docker save rekkoo-server-<< parameters.environment >>-${SAFE_BRANCH_NAME}:latest | gzip > /tmp/docker-images/rekkoo-server.tar.gz
            echo "üì¶ Image size: $(du -h /tmp/docker-images/rekkoo-server.tar.gz | cut -f1)"
            echo "‚úÖ Docker image saved successfully"
      - add_ssh_keys:
          fingerprints:
            - ${HETZNER_SSH_KEY_FINGERPRINT}
      - run:
          name: Configure deployment variables
          command: |
            BASE_DIR="/home/rekkoo/server"
            if [ "<< parameters.environment >>" = "prod" ]; then
              DEPLOY_DIR="${BASE_DIR}/prod"
              DOCKER_COMPOSE_OVERRIDE="docker-compose.prod.yml"
              API_URL="api.rekkoo.com"
            elif [ "<< parameters.environment >>" = "staging" ]; then
              DEPLOY_DIR="${BASE_DIR}/staging/${SAFE_BRANCH_NAME}"
              DOCKER_COMPOSE_OVERRIDE="docker-compose.staging.yml"
              API_URL="${SAFE_BRANCH_NAME}.api-staging.rekkoo.com"
            else
              DEPLOY_DIR="${BASE_DIR}/dev/${SAFE_BRANCH_NAME}"
              DOCKER_COMPOSE_OVERRIDE="docker-compose.override.yml"
              API_URL="api-dev.rekkoo.com"
            fi

            echo "üöÄ Deployment Configuration:"
            echo "  Environment: << parameters.environment >>"
            echo "  Branch: ${SAFE_BRANCH_NAME}"
            echo "  Deploy Directory: ${DEPLOY_DIR}"
            echo "  API URL: https://${API_URL}"
            echo "  Docker Override: ${DOCKER_COMPOSE_OVERRIDE}"
            
            # Export for subsequent steps
            echo "export DEPLOY_DIR=${DEPLOY_DIR}" >> $BASH_ENV
            echo "export DOCKER_COMPOSE_OVERRIDE=${DOCKER_COMPOSE_OVERRIDE}" >> $BASH_ENV
            echo "export API_URL=${API_URL}" >> $BASH_ENV
      - run:
          name: Test SSH connection to server
          command: |
            echo "üîê Testing SSH connection to Hetzner server..."
            ssh -o StrictHostKeyChecking=no ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST} "
              echo '‚úÖ SSH connection successful'
              echo 'üìã Server info:'
              echo '  Hostname: '$(hostname)
              echo '  Uptime: '$(uptime | cut -d',' -f1)
              echo '  Disk space: '$(df -h / | tail -1 | awk '{print \$4}')' available'
              echo '  Memory: '$(free -h | grep Mem | awk '{print \$7}')' available'
              echo '  Docker status: '$(docker --version 2>/dev/null || echo 'Not available')
              echo '  Current containers: '$(docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -v NAMES | wc -l)' running'
            "
      - run:
          name: Create deployment directory
          command: |
            echo "üìÅ Creating deployment directory on server..."
            ssh -o StrictHostKeyChecking=no ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST} "
              mkdir -p ${DEPLOY_DIR}
              echo '‚úÖ Directory created: ${DEPLOY_DIR}'
              ls -la ${DEPLOY_DIR} || echo 'Directory is empty'
            "
      - run:
          name: Copy configuration files
          command: |
            echo "üìÑ Copying Docker Compose and deployment files..."
            echo "üóÇÔ∏è  Files to copy:"
            echo "  - docker-compose.yml"
            echo "  - ${DOCKER_COMPOSE_OVERRIDE}"
            echo "  - scripts/deploy.sh"
            
            scp -o StrictHostKeyChecking=no \
              docker-compose.yml \
              ${DOCKER_COMPOSE_OVERRIDE} \
              scripts/deploy.sh \
              ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/
            echo "‚úÖ Configuration files copied successfully"
      - run:
          name: Upload environment files (if provided)
          command: |
            echo "üìÑ Handling environment files..."
            # Option 1: if ENV_FILE_CONTENT_BASE64 variable is set we create .env dynamically
            if [ -n "${ENV_FILE_CONTENT_BASE64}" ]; then
              echo "üîë Detected ENV_FILE_CONTENT_BASE64 variable ‚Äì generating .env"
              echo "${ENV_FILE_CONTENT_BASE64}" | base64 -d > .env
            fi
            # Option 2: copy any existing .env* files committed to repo
            for f in .env .env.common .env.development .env.staging; do
              if [ -f "$f" ]; then
                echo "üîÑ Preparing $f for transfer"
                scp -o StrictHostKeyChecking=no "$f" ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/
              fi
            done
            if [ -f .env ]; then
              echo "‚úÖ .env uploaded"
            else
              echo "‚ö†Ô∏è  No .env file found/generated ‚Äì deploy.sh will attempt to create one from .env.common"
            fi
      - run:
          name: Transfer Docker image to server
          no_output_timeout: 20m
          command: |
            echo "üö¢ Transferring Docker image to server..."
            echo "üì¶ Image size: $(du -h /tmp/docker-images/rekkoo-server.tar.gz | cut -f1)"
            echo "‚è≥ This may take 5-15 minutes depending on image size and network speed..."
            
            # Show transfer progress with verbose scp
            scp -o StrictHostKeyChecking=no -v \
              /tmp/docker-images/rekkoo-server.tar.gz \
              ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/
            echo "‚úÖ Docker image transferred successfully"
      - run:
          name: Load Docker image on server
          no_output_timeout: 10m
          command: |
            echo "üì• Loading Docker image on server..."
            ssh -o StrictHostKeyChecking=no ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST} "
              cd ${DEPLOY_DIR}
              echo 'üîÑ Extracting and loading Docker image...'
              echo 'Image file size: '$(du -h rekkoo-server.tar.gz | cut -f1)
              gunzip -c rekkoo-server.tar.gz | docker load
              echo '‚úÖ Docker image loaded successfully'
              echo 'üßπ Cleaning up image file...'
              rm rekkoo-server.tar.gz
              echo 'üìã Available Docker images:'
              docker images | grep rekkoo-server | head -3
            "
      - run:
          name: Deploy application containers
          no_output_timeout: 10m
          command: |
            echo "üöÄ Starting application deployment..."
            ssh -o StrictHostKeyChecking=no ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST} "
              cd ${DEPLOY_DIR}
              chmod +x deploy.sh
              
              echo 'üîß Setting environment variables...'
              export SAFE_BRANCH_NAME=${SAFE_BRANCH_NAME}
              export HOST=\${HOST:-api.rekkoo.com}
              export ENTRYPOINT=\${ENTRYPOINT:-websecure}
              export USE_TLS=\${USE_TLS:-true}
              
              echo 'üê≥ Starting containers with docker-compose...'
              echo 'Deploy script output:'
              ./deploy.sh up
              
              echo '‚úÖ Deployment completed successfully!'
              echo 'üìã Container status:'
              docker ps | grep rekkoo-server || echo 'No rekkoo-server containers found'
            "
      - run:
          name: Verify deployment
          command: |
            echo "üîç Verifying deployment..."
            echo "üåê API should be available at: https://${API_URL}"
            echo "‚è≥ Allowing 30 seconds for container startup..."
            sleep 30
            
            # Test health endpoint
            echo "ü©∫ Testing health endpoint..."
            if curl -s -o /dev/null -w "%{http_code}" https://${API_URL}/health | grep -E "^(200|301|302)"; then
              echo "‚úÖ API health endpoint is responding!"
            else
              echo "‚ö†Ô∏è  API may still be starting up"
            fi
            
            # Test auth endpoint structure
            echo "üîê Testing auth endpoint availability..."
            if curl -s -o /dev/null -w "%{http_code}" https://${API_URL}/v1.0/auth/login | grep -E "^(405|500)"; then
              echo "‚úÖ Auth endpoints are available (method not allowed expected)"
            else
              echo "‚ö†Ô∏è  Auth endpoints may not be ready"
            fi
            
            echo "üîó Manual check: https://${API_URL}/health"
      - run:
          name: Show deployment summary
          command: |
            echo "üìä Deployment Summary:"
            echo "  Environment: << parameters.environment >>"
            echo "  Branch: ${CIRCLE_BRANCH}"
            echo "  Safe branch: ${SAFE_BRANCH_NAME}"
            echo "  API URL: https://${API_URL}"
            echo "  Deploy directory: ${DEPLOY_DIR}"
            echo "  Docker image: rekkoo-server-<< parameters.environment >>-${SAFE_BRANCH_NAME}:latest"
            echo "‚úÖ Server deployment pipeline completed!"
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ *Rekkoo Server Deployment Successful*\n*Environment:* << parameters.environment >>\n*Branch:* ${CIRCLE_BRANCH}\n*API URL:* https://${API_URL}"
                  }
                }
              ]
            }

jobs:
  # Simple validation job to prevent "No workflow" entries
  validate:
    executor: node-docker
    steps:
      - checkout
      - run:
          name: Validate branch
          command: |
            echo "‚úÖ Branch validation complete: ${CIRCLE_BRANCH}"
            echo "This job prevents 'No workflow' pipeline entries"

  deploy-prod:
    executor: node-docker
    steps:
      - deploy:
          environment: prod

  deploy-staging:
    executor: node-docker
    steps:
      - deploy:
          environment: staging

  deploy-dev:
    executor: node-docker
    steps:
      - deploy:
          environment: dev

workflows:
  version: 2
  
  # Branch validation (prevents "No workflow" entries)
  validate-branch:
    jobs:
      - validate:
          filters:
            branches:
              ignore: 
                - main
                - /.*dev.*/
  
  # Automatic production deployment
  production-deploy:
    jobs:
      - deploy-prod:
          context:
            - hetzner-deploy-secrets
            - slack-secrets
            - rekkoo-secrets
          filters:
            branches:
              only: main
  
  # Staging deployment for feature branches
  staging-deploy:
    jobs:
      - deploy-staging:
          context:
            - hetzner-deploy-secrets
            - slack-secrets
            - rekkoo-secrets
          filters:
            branches:
              ignore:
                - main
                - /.*dev.*/
  
  # Development deployment
  development-deploy:
    jobs:
      - deploy-dev:
          context:
            - hetzner-deploy-secrets
            - slack-secrets
            - rekkoo-secrets
          filters:
            branches:
              only: /.*dev.*/
