version: 2.1

orbs:
  slack: circleci/slack@4.12.5

executors:
  node-docker:
    docker:
      - image: cimg/node:20.0
    resource_class: medium

commands:
  deploy:
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Set branch variables
          command: |
            SAFE_BRANCH_NAME=$(echo ${CIRCLE_BRANCH} | tr '/' '-' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
            echo "export SAFE_BRANCH_NAME=${SAFE_BRANCH_NAME}" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Build Docker image
          command: |
            echo "Building Docker image for << parameters.environment >>..."
            docker build -t express-app:${CIRCLE_SHA1} \
              --build-arg NODE_ENV=<< parameters.environment >> \
              .
            docker tag express-app:${CIRCLE_SHA1} express-app-<< parameters.environment >>-${SAFE_BRANCH_NAME}:latest
      - run:
          name: Save Docker image
          command: |
            mkdir -p /tmp/docker-images
            docker save express-app-<< parameters.environment >>-${SAFE_BRANCH_NAME}:latest | gzip > /tmp/docker-images/express-app.tar.gz
      - add_ssh_keys:
          fingerprints:
            - ${HETZNER_SSH_KEY_FINGERPRINT}
      - run:
          name: Deploy to Hetzner
          command: |
            BASE_DIR="/home/rekkoo/api"
            if [ "<< parameters.environment >>" = "prod" ]; then
              DEPLOY_DIR="${BASE_DIR}/prod"
              DOCKER_COMPOSE_OVERRIDE="docker-compose.prod.yml"
            elif [ "<< parameters.environment >>" = "staging" ]; then
              DEPLOY_DIR="${BASE_DIR}/staging/${SAFE_BRANCH_NAME}"
              DOCKER_COMPOSE_OVERRIDE="docker-compose.override.yml"
            else
              DEPLOY_DIR="${BASE_DIR}/dev/${SAFE_BRANCH_NAME}"
              DOCKER_COMPOSE_OVERRIDE="docker-compose.override.yml"
            fi

            echo "Starting deployment to ${DEPLOY_DIR}..."
            
            # Create deployment directory
            ssh -o StrictHostKeyChecking=no ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST} "
              mkdir -p ${DEPLOY_DIR}
            "
            
            # Copy docker-compose files and Dockerfile
            scp -o StrictHostKeyChecking=no \
              docker-compose.yml \
              ${DOCKER_COMPOSE_OVERRIDE} \
              Dockerfile \
              ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/
            
            # Copy environment file based on deployment environment
            if [ "<< parameters.environment >>" = "prod" ]; then
              scp -o StrictHostKeyChecking=no .env.production ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/.env
            elif [ "<< parameters.environment >>" = "staging" ]; then
              scp -o StrictHostKeyChecking=no .env.development ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/.env
            else
              scp -o StrictHostKeyChecking=no .env.development ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/.env
            fi
            
            # Copy docker image
            scp -o StrictHostKeyChecking=no \
              /tmp/docker-images/express-app.tar.gz \
              ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST}:${DEPLOY_DIR}/
            
            # Deploy
            ssh -o StrictHostKeyChecking=no ${HETZNER_DEPLOY_USER}@${HETZNER_VPS_HOST} "
              cd ${DEPLOY_DIR} && \
              echo 'Loading Docker image...' && \
              gunzip -c express-app.tar.gz | docker load && \
              echo 'Starting containers...' && \
              SAFE_BRANCH_NAME=${SAFE_BRANCH_NAME} \
              DEPLOY_ENV=<< parameters.environment >> \
              docker compose -f docker-compose.yml -f ${DOCKER_COMPOSE_OVERRIDE} up -d && \
              echo 'Cleaning up...' && \
              rm express-app.tar.gz && \
              echo 'Deployment completed for ${SAFE_BRANCH_NAME} to << parameters.environment >>'
            "
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

jobs:
  deploy-prod:
    executor: node-docker
    steps:
      - deploy:
          environment: prod

  deploy-staging:
    executor: node-docker
    steps:
      - deploy:
          environment: staging

  deploy-dev:
    executor: node-docker
    steps:
      - deploy:
          environment: dev

workflows:
  version: 2
  build-deploy:
    jobs:
      - deploy-prod:
          context:
            - hetzner-deploy-secrets
            - slack-secrets
            - rekkoo-secrets
          filters:
            branches:
              only: main
      - deploy-staging:
          context:
            - hetzner-deploy-secrets
            - slack-secrets
            - rekkoo-secrets
          filters:
            branches:
              ignore:
                - main
                - /.*dev.*/
      - deploy-dev:
          context:
            - hetzner-deploy-secrets
            - slack-secrets
            - rekkoo-secrets
          filters:
            branches:
              only: /.*dev.*/
